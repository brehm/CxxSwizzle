diff -rupN original/common/types.h new/common/types.h
--- original/common/types.h	Thu May 15 13:38:24 2014
+++ new/common/types.h	Wed Jan 14 22:21:14 2015
@@ -25,6 +25,8 @@
 #include <cstdio>
 #endif
 
+#include <type_traits>
+
 /*OUTER_NAMESPACE_BEGIN*/
 namespace Vc
 {
@@ -119,23 +121,7 @@ namespace
 
     template<typename From, typename To> struct HasImplicitCast
     {
-#ifdef VC_MSVC
-        // MSVC can't compile this code if we pass a type that has large alignment restrictions by
-        // value
-        // clang OTOH warns about this code if we pass a null-reference, thus we ifdef the const-ref
-        // for MSVC only
-        static yes test(const To &) { return yes(); }
-#else
-        static yes test( To) { return yes(); }
-#endif
-        static  no test(...) { return  no(); }
-        enum {
-#ifdef VC_MSVC
-            // I want to test whether implicit cast works. If it works MSVC thinks it should give a warning. Wrong. Shut up.
-#pragma warning(suppress : 4257 4267)
-#endif
-            Value = !!(sizeof(test(*static_cast<From *>(0))) == sizeof(yes))
-        };
+        enum { Value = std::is_convertible<From, To>::value };
     };
 #if defined(VC_GCC) && VC_GCC < 0x40300
     // GCC 4.1 is very noisy because of the float->int and double->int type trait tests. We get
